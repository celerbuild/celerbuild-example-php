name: celerbuild-example-php-prod
env: prod
# Repository URL supports two formats:
# 1. HTTPS format (recommended for public repositories): https://github.com/celerbuild/celerbuild-example-php.git
# 2. SSH format (requires SSH key configuration): git@github.com:celerbuild/celerbuild-example-php.git
repoPath: https://github.com/celerbuild/celerbuild-example-php.git

# Specify the server path for project deployment
targetDeployPath: /home/ubuntu/apps/php

# Specify the warehouse path on target server for storing deployment packages
targetDeployWarehousePath: /home/ubuntu/repos/php

# Number of versions to keep in the warehouse repository
targetWarehouseVersionKeep: 3

# serverClusterID: Please select an actual existing server cluster after importing the template
# The ID will be different in your environment
serverClusterID: 34

# deployMode: Supports two modes
# - branch: for development environment
# - tag: for production environment
deployMode: tag

# Specify the actual user account on the target deployment server
deployUser: ubuntu

# buildCmds: Commands executed during the build phase
# These commands are executed on the build server to create deployment packages
buildCmds:  |-
  # Check the operating system type
  OS=$(uname)

  # Create package based on OS type
  if [ "$OS" = "Darwin" ]; then
  # For macOS, include mac-specific options
  tar --no-xattrs --no-mac-metadata -zcvf ${LOCAL_PACKAGE_FILE} .env.dist *
  else
  # For Linux and other systems, use standard options
  tar --no-xattrs -zcvf ${LOCAL_PACKAGE_FILE} .env.dist *
  fi

# preDeploymentCmds: Commands executed before deployment
# These commands run on target servers before the new version is deployed
preDeploymentCmds: ''

# postDeploymentCmds: Commands executed after deployment
# These commands run on target servers after the new version is deployed
# Typically used for service restart, permission updates, and deployment verification
postDeploymentCmds: |-
  #!/bin/bash

  # Define project directories
  DEPLOY_USER="${DEPLOY_USER}"  # Deployment user (e.g., ubuntu, ec2-user, etc.)
  SOURCE_DIR="${TARGET_DEPLOYMENT_PATH}/${TARGET_DEPLOYMENT_PROJECT_NAME}"
  DEST_DIR="/home/${DEPLOY_USER}/celerbuild-example-php"

  # Check if the destination directory exists
  if [ ! -d "$DEST_DIR" ]; then
      sudo mkdir -p "$DEST_DIR"
      echo "Directory $DEST_DIR created."
  else
      echo "Directory $DEST_DIR already exists."
  fi

  # Temporarily set permissions for the destination directory
  sudo chown -R ${DEPLOY_USER}:${DEPLOY_USER} "$DEST_DIR"
  sudo chmod -R 755 "$DEST_DIR"

  # Copy contents to the destination directory
  cp -r "$SOURCE_DIR"/. "$DEST_DIR"
  echo "Files copied from $SOURCE_DIR to $DEST_DIR."


  # Check if .env file exists, if not, create it from .env.dist
  if [ ! -f "$DEST_DIR/.env" ]; then
      cp "$DEST_DIR/.env.dist" "$DEST_DIR/.env"
      echo ".env file created from .env.dist."
  fi

  # Set permissions for the .env file
  sudo chown www-data:www-data "$DEST_DIR/.env"
  sudo chmod 644 "$DEST_DIR/.env"

  # Set final permissions for the destination directory
  sudo chown -R www-data:www-data "$DEST_DIR"
  sudo chmod -R 755 "$DEST_DIR"

  # Install only production dependencies
  composer install --no-dev --optimize-autoloader

  # Clear and warm up the cache for the prod environment
  php bin/console cache:clear --env=prod
  php bin/console cache:warmup --env=prod

  # Restart Nginx and PHP-FPM
  sudo systemctl restart nginx
  sudo systemctl restart php8.1-fpm
  echo "Nginx and PHP-FPM restarted."

# Number of latest tags to show in the deployment dropdown list for production environment
numberOfLatestTags: 3